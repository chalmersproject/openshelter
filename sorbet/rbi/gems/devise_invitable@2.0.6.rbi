# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `devise_invitable` gem.
# Please instead update this file by running `bin/tapioca gem devise_invitable`.

# source://devise_invitable//lib/devise_invitable/routes.rb#1
module ActionDispatch::Routing; end

# source://actionpack/7.0.3.1/lib/action_dispatch/routing.rb#258
ActionDispatch::Routing::HTTP_METHODS = T.let(T.unsafe(nil), Array)

# source://devise_invitable//lib/devise_invitable/routes.rb#2
class ActionDispatch::Routing::Mapper
  # source://actionpack/7.0.3.1/lib/action_dispatch/routing/mapper.rb#2279
  def initialize(set); end

  # Sets the devise scope to be used in the controller. If you have custom routes,
  # you are required to call this method (also aliased as :as) in order to specify
  # to which controller it is targeted.
  #
  #   as :user do
  #     get "sign_in", to: "devise/sessions#new"
  #   end
  #
  # Notice you cannot have two scopes mapping to the same URL. And remember, if
  # you try to access a devise controller without specifying a scope, it will
  # raise ActionNotFound error.
  #
  # Also be aware of that 'devise_scope' and 'as' use the singular form of the
  # noun where other devise route commands expect the plural form. This would be a
  # good and working example.
  #
  #  devise_scope :user do
  #    get "/some/route" => "some_devise_controller"
  #  end
  #  devise_for :users
  #
  # Notice and be aware of the differences above between :user and :users
  #
  # source://devise/4.8.1/lib/devise/rails/routes.rb#363
  def as(scope); end

  # Allow you to add authentication request from the router.
  # Takes an optional scope and block to provide constraints
  # on the model instance itself.
  #
  #   authenticate do
  #     resources :post
  #   end
  #
  #   authenticate(:admin) do
  #     resources :users
  #   end
  #
  #   authenticate :user, lambda {|u| u.role == "admin"} do
  #     root to: "admin/dashboard#show", as: :user_root
  #   end
  #
  # source://devise/4.8.1/lib/devise/rails/routes.rb#290
  def authenticate(scope = T.unsafe(nil), block = T.unsafe(nil)); end

  # Allow you to route based on whether a scope is authenticated. You
  # can optionally specify which scope and a block. The block accepts
  # a model and allows extra constraints to be done on the instance.
  #
  #   authenticated :admin do
  #     root to: 'admin/dashboard#show', as: :admin_root
  #   end
  #
  #   authenticated do
  #     root to: 'dashboard#show', as: :authenticated_root
  #   end
  #
  #   authenticated :user, lambda {|u| u.role == "admin"} do
  #     root to: "admin/dashboard#show", as: :user_root
  #   end
  #
  #   root to: 'landing#show'
  #
  # source://devise/4.8.1/lib/devise/rails/routes.rb#314
  def authenticated(scope = T.unsafe(nil), block = T.unsafe(nil)); end

  # Includes devise_for method for routes. This method is responsible to
  # generate all needed routes for devise, based on what modules you have
  # defined in your model.
  #
  # ==== Examples
  #
  # Let's say you have an User model configured to use authenticatable,
  # confirmable and recoverable modules. After creating this inside your routes:
  #
  #   devise_for :users
  #
  # This method is going to look inside your User model and create the
  # needed routes:
  #
  #  # Session routes for Authenticatable (default)
  #       new_user_session GET    /users/sign_in                    {controller:"devise/sessions", action:"new"}
  #           user_session POST   /users/sign_in                    {controller:"devise/sessions", action:"create"}
  #   destroy_user_session DELETE /users/sign_out                   {controller:"devise/sessions", action:"destroy"}
  #
  #  # Password routes for Recoverable, if User model has :recoverable configured
  #      new_user_password GET    /users/password/new(.:format)     {controller:"devise/passwords", action:"new"}
  #     edit_user_password GET    /users/password/edit(.:format)    {controller:"devise/passwords", action:"edit"}
  #          user_password PUT    /users/password(.:format)         {controller:"devise/passwords", action:"update"}
  #                        POST   /users/password(.:format)         {controller:"devise/passwords", action:"create"}
  #
  #  # Confirmation routes for Confirmable, if User model has :confirmable configured
  #  new_user_confirmation GET    /users/confirmation/new(.:format) {controller:"devise/confirmations", action:"new"}
  #      user_confirmation GET    /users/confirmation(.:format)     {controller:"devise/confirmations", action:"show"}
  #                        POST   /users/confirmation(.:format)     {controller:"devise/confirmations", action:"create"}
  #
  # ==== Routes integration
  #
  # +devise_for+ is meant to play nicely with other routes methods. For example,
  # by calling +devise_for+ inside a namespace, it automatically nests your devise
  # controllers:
  #
  #     namespace :publisher do
  #       devise_for :account
  #     end
  #
  # The snippet above will use publisher/sessions controller instead of devise/sessions
  # controller. You can revert this change or configure it directly by passing the :module
  # option described below to +devise_for+.
  #
  # Also note that when you use a namespace it will affect all the helpers and methods
  # for controllers and views. For example, using the above setup you'll end with
  # following methods: current_publisher_account, authenticate_publisher_account!,
  # publisher_account_signed_in, etc.
  #
  # The only aspect not affect by the router configuration is the model name. The
  # model name can be explicitly set via the :class_name option.
  #
  # ==== Options
  #
  # You can configure your routes with some options:
  #
  #  * class_name: set up a different class to be looked up by devise, if it cannot be
  #    properly found by the route name.
  #
  #      devise_for :users, class_name: 'Account'
  #
  #  * path: allows you to set up path name that will be used, as rails routes does.
  #    The following route configuration would set up your route as /accounts instead of /users:
  #
  #      devise_for :users, path: 'accounts'
  #
  #  * singular: set up the singular name for the given resource. This is used as the helper methods
  #    names in controller ("authenticate_#{singular}!", "#{singular}_signed_in?", "current_#{singular}"
  #    and "#{singular}_session"), as the scope name in routes and as the scope given to warden.
  #
  #      devise_for :admins, singular: :manager
  #
  #      devise_scope :manager do
  #        ...
  #      end
  #
  #      class ManagerController < ApplicationController
  #        before_action authenticate_manager!
  #
  #        def show
  #          @manager = current_manager
  #          ...
  #        end
  #      end
  #
  #  * path_names: configure different path names to overwrite defaults :sign_in, :sign_out, :sign_up,
  #    :password, :confirmation, :unlock.
  #
  #      devise_for :users, path_names: {
  #        sign_in: 'login', sign_out: 'logout',
  #        password: 'secret', confirmation: 'verification',
  #        registration: 'register', edit: 'edit/profile'
  #      }
  #
  #  * controllers: the controller which should be used. All routes by default points to Devise controllers.
  #    However, if you want them to point to custom controller, you should do:
  #
  #      devise_for :users, controllers: { sessions: "users/sessions" }
  #
  #  * failure_app: a rack app which is invoked whenever there is a failure. Strings representing a given
  #    are also allowed as parameter.
  #
  #  * sign_out_via: the HTTP method(s) accepted for the :sign_out action (default: :delete),
  #    if you wish to restrict this to accept only :post or :delete requests you should do:
  #
  #      devise_for :users, sign_out_via: [:get, :post]
  #
  #    You need to make sure that your sign_out controls trigger a request with a matching HTTP method.
  #
  #  * module: the namespace to find controllers (default: "devise", thus
  #    accessing devise/sessions, devise/registrations, and so on). If you want
  #    to namespace all at once, use module:
  #
  #      devise_for :users, module: "users"
  #
  #  * skip: tell which controller you want to skip routes from being created.
  #    It accepts :all as an option, meaning it will not generate any route at all:
  #
  #      devise_for :users, skip: :sessions
  #
  #  * only: the opposite of :skip, tell which controllers only to generate routes to:
  #
  #      devise_for :users, only: :sessions
  #
  #  * skip_helpers: skip generating Devise url helpers like new_session_path(@user).
  #    This is useful to avoid conflicts with previous routes and is false by default.
  #    It accepts true as option, meaning it will skip all the helpers for the controllers
  #    given in :skip but it also accepts specific helpers to be skipped:
  #
  #      devise_for :users, skip: [:registrations, :confirmations], skip_helpers: true
  #      devise_for :users, skip_helpers: [:registrations, :confirmations]
  #
  #  * format: include "(.:format)" in the generated routes? true by default, set to false to disable:
  #
  #      devise_for :users, format: false
  #
  #  * constraints: works the same as Rails' constraints
  #
  #  * defaults: works the same as Rails' defaults
  #
  #  * router_name: allows application level router name to be overwritten for the current scope
  #
  # ==== Scoping
  #
  # Following Rails 3 routes DSL, you can nest devise_for calls inside a scope:
  #
  #   scope "/my" do
  #     devise_for :users
  #   end
  #
  # However, since Devise uses the request path to retrieve the current user,
  # this has one caveat: If you are using a dynamic segment, like so ...
  #
  #   scope ":locale" do
  #     devise_for :users
  #   end
  #
  # you are required to configure default_url_options in your
  # ApplicationController class, so Devise can pick it:
  #
  #   class ApplicationController < ActionController::Base
  #     def self.default_url_options
  #       { locale: I18n.locale }
  #     end
  #   end
  #
  # ==== Adding custom actions to override controllers
  #
  # You can pass a block to devise_for that will add any routes defined in the block to Devise's
  # list of known actions.  This is important if you add a custom action to a controller that
  # overrides an out of the box Devise controller.
  # For example:
  #
  #    class RegistrationsController < Devise::RegistrationsController
  #      def update
  #         # do something different here
  #      end
  #
  #      def deactivate
  #        # not a standard action
  #        # deactivate code here
  #      end
  #    end
  #
  # In order to get Devise to recognize the deactivate action, your devise_scope entry should look like this:
  #
  #     devise_scope :owner do
  #       post "deactivate", to: "registrations#deactivate", as: "deactivate_registration"
  #     end
  #
  # source://devise/4.8.1/lib/devise/rails/routes.rb#226
  def devise_for(*resources); end

  # Sets the devise scope to be used in the controller. If you have custom routes,
  # you are required to call this method (also aliased as :as) in order to specify
  # to which controller it is targeted.
  #
  #   as :user do
  #     get "sign_in", to: "devise/sessions#new"
  #   end
  #
  # Notice you cannot have two scopes mapping to the same URL. And remember, if
  # you try to access a devise controller without specifying a scope, it will
  # raise ActionNotFound error.
  #
  # Also be aware of that 'devise_scope' and 'as' use the singular form of the
  # noun where other devise route commands expect the plural form. This would be a
  # good and working example.
  #
  #  devise_scope :user do
  #    get "/some/route" => "some_devise_controller"
  #  end
  #  devise_for :users
  #
  # Notice and be aware of the differences above between :user and :users
  #
  # source://devise/4.8.1/lib/devise/rails/routes.rb#363
  def devise_scope(scope); end

  # Allow you to route based on whether a scope is *not* authenticated.
  # You can optionally specify which scope.
  #
  #   unauthenticated do
  #     as :user do
  #       root to: 'devise/registrations#new'
  #     end
  #   end
  #
  #   root to: 'dashboard#show'
  #
  # source://devise/4.8.1/lib/devise/rails/routes.rb#331
  def unauthenticated(scope = T.unsafe(nil)); end

  protected

  # source://devise/4.8.1/lib/devise/rails/routes.rb#477
  def constraints_for(method_to_apply, scope = T.unsafe(nil), block = T.unsafe(nil)); end

  # source://devise/4.8.1/lib/devise/rails/routes.rb#390
  def devise_confirmation(mapping, controllers); end

  # source://devise_invitable//lib/devise_invitable/routes.rb#6
  def devise_invitation(mapping, controllers); end

  # source://devise/4.8.1/lib/devise/rails/routes.rb#421
  def devise_omniauth_callback(mapping, controllers); end

  # source://devise/4.8.1/lib/devise/rails/routes.rb#385
  def devise_password(mapping, controllers); end

  # source://devise/4.8.1/lib/devise/rails/routes.rb#402
  def devise_registration(mapping, controllers); end

  # source://devise/4.8.1/lib/devise/rails/routes.rb#377
  def devise_session(mapping, controllers); end

  # source://devise/4.8.1/lib/devise/rails/routes.rb#395
  def devise_unlock(mapping, controllers); end

  # source://devise/4.8.1/lib/devise/rails/routes.rb#509
  def raise_no_devise_method_error!(klass); end

  # source://devise/4.8.1/lib/devise/rails/routes.rb#499
  def raise_no_secret_key; end

  # source://devise/4.8.1/lib/devise/rails/routes.rb#488
  def set_omniauth_path_prefix!(path_prefix); end

  # source://devise/4.8.1/lib/devise/rails/routes.rb#461
  def with_devise_exclusive_scope(new_path, new_as, options); end

  class << self
    # source://actionpack/7.0.3.1/lib/action_dispatch/routing/mapper.rb#381
    def normalize_name(name); end

    # source://actionpack/7.0.3.1/lib/action_dispatch/routing/mapper.rb#364
    def normalize_path(path); end
  end
end

# source://actionpack/7.0.3.1/lib/action_dispatch/routing/mapper.rb#13
ActionDispatch::Routing::Mapper::URL_OPTIONS = T.let(T.unsafe(nil), Array)

# source://actionpack/7.0.3.1/lib/action_dispatch/routing.rb#257
ActionDispatch::Routing::SEPARATORS = T.let(T.unsafe(nil), Array)

# source://devise_invitable//lib/devise_invitable.rb#16
module Devise
  # source://devise_invitable//lib/devise_invitable.rb#78
  def allow_insecure_sign_in_after_accept; end

  # source://devise_invitable//lib/devise_invitable.rb#78
  def allow_insecure_sign_in_after_accept=(val); end

  # source://devise/4.8.1/lib/devise.rb#136
  def allow_unconfirmed_access_for; end

  # source://devise/4.8.1/lib/devise.rb#136
  def allow_unconfirmed_access_for=(val); end

  # source://devise/4.8.1/lib/devise.rb#81
  def authentication_keys; end

  # source://devise/4.8.1/lib/devise.rb#81
  def authentication_keys=(val); end

  # source://devise/4.8.1/lib/devise.rb#89
  def case_insensitive_keys; end

  # source://devise/4.8.1/lib/devise.rb#89
  def case_insensitive_keys=(val); end

  # source://devise/4.8.1/lib/devise.rb#254
  def clean_up_csrf_token_on_authentication; end

  # source://devise/4.8.1/lib/devise.rb#254
  def clean_up_csrf_token_on_authentication=(val); end

  # source://devise/4.8.1/lib/devise.rb#140
  def confirm_within; end

  # source://devise/4.8.1/lib/devise.rb#140
  def confirm_within=(val); end

  # source://devise/4.8.1/lib/devise.rb#144
  def confirmation_keys; end

  # source://devise/4.8.1/lib/devise.rb#144
  def confirmation_keys=(val); end

  # source://devise/4.8.1/lib/devise.rb#207
  def default_scope; end

  # source://devise/4.8.1/lib/devise.rb#207
  def default_scope=(val); end

  # source://devise/4.8.1/lib/devise.rb#115
  def email_regexp; end

  # source://devise/4.8.1/lib/devise.rb#115
  def email_regexp=(val); end

  # source://devise/4.8.1/lib/devise.rb#131
  def expire_all_remember_me_on_sign_out; end

  # source://devise/4.8.1/lib/devise.rb#131
  def expire_all_remember_me_on_sign_out=(val); end

  # source://devise/4.8.1/lib/devise.rb#127
  def extend_remember_period; end

  # source://devise/4.8.1/lib/devise.rb#127
  def extend_remember_period=(val); end

  # source://devise/4.8.1/lib/devise.rb#275
  def helpers; end

  # source://devise/4.8.1/lib/devise.rb#97
  def http_authenticatable; end

  # source://devise/4.8.1/lib/devise.rb#97
  def http_authenticatable=(val); end

  # source://devise/4.8.1/lib/devise.rb#101
  def http_authenticatable_on_xhr; end

  # source://devise/4.8.1/lib/devise.rb#101
  def http_authenticatable_on_xhr=(val); end

  # source://devise/4.8.1/lib/devise.rb#77
  def http_authentication_key; end

  # source://devise/4.8.1/lib/devise.rb#77
  def http_authentication_key=(val); end

  # source://devise/4.8.1/lib/devise.rb#109
  def http_authentication_realm; end

  # source://devise/4.8.1/lib/devise.rb#109
  def http_authentication_realm=(val); end

  # source://devise_invitable//lib/devise_invitable.rb#40
  def invitation_limit; end

  # source://devise_invitable//lib/devise_invitable.rb#40
  def invitation_limit=(val); end

  # source://devise_invitable//lib/devise_invitable.rb#22
  def invite_for; end

  # source://devise_invitable//lib/devise_invitable.rb#22
  def invite_for=(val); end

  # source://devise_invitable//lib/devise_invitable.rb#49
  def invite_key; end

  # source://devise_invitable//lib/devise_invitable.rb#49
  def invite_key=(val); end

  # source://devise_invitable//lib/devise_invitable.rb#63
  def invited_by_class_name; end

  # source://devise_invitable//lib/devise_invitable.rb#63
  def invited_by_class_name=(val); end

  # source://devise_invitable//lib/devise_invitable.rb#73
  def invited_by_counter_cache; end

  # source://devise_invitable//lib/devise_invitable.rb#73
  def invited_by_counter_cache=(val); end

  # source://devise_invitable//lib/devise_invitable.rb#68
  def invited_by_foreign_key; end

  # source://devise_invitable//lib/devise_invitable.rb#68
  def invited_by_foreign_key=(val); end

  # source://devise/4.8.1/lib/devise.rb#289
  def last_attempt_warning; end

  # source://devise/4.8.1/lib/devise.rb#289
  def last_attempt_warning=(val); end

  # source://devise/4.8.1/lib/devise.rb#174
  def lock_strategy; end

  # source://devise/4.8.1/lib/devise.rb#174
  def lock_strategy=(val); end

  # source://devise/4.8.1/lib/devise.rb#211
  def mailer_sender; end

  # source://devise/4.8.1/lib/devise.rb#211
  def mailer_sender=(val); end

  # source://devise/4.8.1/lib/devise.rb#267
  def mappings; end

  # source://devise/4.8.1/lib/devise.rb#187
  def maximum_attempts; end

  # source://devise/4.8.1/lib/devise.rb#187
  def maximum_attempts=(val); end

  # source://devise/4.8.1/lib/devise.rb#219
  def navigational_formats; end

  # source://devise/4.8.1/lib/devise.rb#219
  def navigational_formats=(val); end

  # source://devise/4.8.1/lib/devise.rb#271
  def omniauth_configs; end

  # source://devise/4.8.1/lib/devise.rb#250
  def omniauth_path_prefix; end

  # source://devise/4.8.1/lib/devise.rb#250
  def omniauth_path_prefix=(val); end

  # source://devise/4.8.1/lib/devise.rb#105
  def params_authenticatable; end

  # source://devise/4.8.1/lib/devise.rb#105
  def params_authenticatable=(val); end

  # source://devise/4.8.1/lib/devise.rb#285
  def paranoid; end

  # source://devise/4.8.1/lib/devise.rb#285
  def paranoid=(val); end

  # source://devise/4.8.1/lib/devise.rb#233
  def parent_controller; end

  # source://devise/4.8.1/lib/devise.rb#233
  def parent_controller=(val); end

  # source://devise/4.8.1/lib/devise.rb#239
  def parent_mailer; end

  # source://devise/4.8.1/lib/devise.rb#239
  def parent_mailer=(val); end

  # source://devise/4.8.1/lib/devise.rb#119
  def password_length; end

  # source://devise/4.8.1/lib/devise.rb#119
  def password_length=(val); end

  # source://devise/4.8.1/lib/devise.rb#156
  def pepper; end

  # source://devise/4.8.1/lib/devise.rb#156
  def pepper=(val); end

  # source://devise/4.8.1/lib/devise.rb#148
  def reconfirmable; end

  # source://devise/4.8.1/lib/devise.rb#148
  def reconfirmable=(val); end

  # source://devise/4.8.1/lib/devise.rb#261
  def reload_routes; end

  # source://devise/4.8.1/lib/devise.rb#261
  def reload_routes=(val); end

  # source://devise/4.8.1/lib/devise.rb#123
  def remember_for; end

  # source://devise/4.8.1/lib/devise.rb#123
  def remember_for=(val); end

  # source://devise/4.8.1/lib/devise.rb#69
  def rememberable_options; end

  # source://devise/4.8.1/lib/devise.rb#69
  def rememberable_options=(val); end

  # source://devise/4.8.1/lib/devise.rb#85
  def request_keys; end

  # source://devise/4.8.1/lib/devise.rb#85
  def request_keys=(val); end

  # source://devise_invitable//lib/devise_invitable.rb#84
  def require_password_on_accepting; end

  # source://devise_invitable//lib/devise_invitable.rb#84
  def require_password_on_accepting=(val); end

  # source://devise_invitable//lib/devise_invitable.rb#58
  def resend_invitation; end

  # source://devise_invitable//lib/devise_invitable.rb#58
  def resend_invitation=(val); end

  # source://devise/4.8.1/lib/devise.rb#195
  def reset_password_keys; end

  # source://devise/4.8.1/lib/devise.rb#195
  def reset_password_keys=(val); end

  # source://devise/4.8.1/lib/devise.rb#199
  def reset_password_within; end

  # source://devise/4.8.1/lib/devise.rb#199
  def reset_password_within=(val); end

  # source://devise/4.8.1/lib/devise.rb#245
  def router_name; end

  # source://devise/4.8.1/lib/devise.rb#245
  def router_name=(val); end

  # source://devise/4.8.1/lib/devise.rb#169
  def scoped_views; end

  # source://devise/4.8.1/lib/devise.rb#169
  def scoped_views=(val); end

  # source://devise/4.8.1/lib/devise.rb#65
  def secret_key; end

  # source://devise/4.8.1/lib/devise.rb#65
  def secret_key=(val); end

  # source://devise/4.8.1/lib/devise.rb#160
  def send_email_changed_notification; end

  # source://devise/4.8.1/lib/devise.rb#160
  def send_email_changed_notification=(val); end

  # source://devise/4.8.1/lib/devise.rb#164
  def send_password_change_notification; end

  # source://devise/4.8.1/lib/devise.rb#164
  def send_password_change_notification=(val); end

  # source://devise/4.8.1/lib/devise.rb#297
  def sign_in_after_change_password; end

  # source://devise/4.8.1/lib/devise.rb#297
  def sign_in_after_change_password=(val); end

  # source://devise/4.8.1/lib/devise.rb#203
  def sign_in_after_reset_password; end

  # source://devise/4.8.1/lib/devise.rb#203
  def sign_in_after_reset_password=(val); end

  # source://devise/4.8.1/lib/devise.rb#223
  def sign_out_all_scopes; end

  # source://devise/4.8.1/lib/devise.rb#223
  def sign_out_all_scopes=(val); end

  # source://devise/4.8.1/lib/devise.rb#227
  def sign_out_via; end

  # source://devise/4.8.1/lib/devise.rb#227
  def sign_out_via=(val); end

  # source://devise/4.8.1/lib/devise.rb#215
  def skip_session_storage; end

  # source://devise/4.8.1/lib/devise.rb#215
  def skip_session_storage=(val); end

  # source://devise/4.8.1/lib/devise.rb#73
  def stretches; end

  # source://devise/4.8.1/lib/devise.rb#73
  def stretches=(val); end

  # source://devise/4.8.1/lib/devise.rb#93
  def strip_whitespace_keys; end

  # source://devise/4.8.1/lib/devise.rb#93
  def strip_whitespace_keys=(val); end

  # source://devise/4.8.1/lib/devise.rb#152
  def timeout_in; end

  # source://devise/4.8.1/lib/devise.rb#152
  def timeout_in=(val); end

  # source://devise/4.8.1/lib/devise.rb#293
  def token_generator; end

  # source://devise/4.8.1/lib/devise.rb#293
  def token_generator=(val); end

  # source://devise/4.8.1/lib/devise.rb#191
  def unlock_in; end

  # source://devise/4.8.1/lib/devise.rb#191
  def unlock_in=(val); end

  # source://devise/4.8.1/lib/devise.rb#178
  def unlock_keys; end

  # source://devise/4.8.1/lib/devise.rb#178
  def unlock_keys=(val); end

  # source://devise/4.8.1/lib/devise.rb#183
  def unlock_strategy; end

  # source://devise/4.8.1/lib/devise.rb#183
  def unlock_strategy=(val); end

  # source://devise_invitable//lib/devise_invitable.rb#32
  def validate_on_invite; end

  # source://devise_invitable//lib/devise_invitable.rb#32
  def validate_on_invite=(val); end

  # source://devise/4.8.1/lib/devise.rb#280
  def warden_config; end

  # source://devise/4.8.1/lib/devise.rb#280
  def warden_config=(val); end

  class << self
    # @return [Boolean]
    #
    # source://devise/4.8.1/lib/devise.rb#300
    def activerecord51?; end

    # Small method that adds a mapping to Devise.
    #
    # source://devise/4.8.1/lib/devise.rb#353
    def add_mapping(resource, options); end

    # Register available devise modules. For the standard modules that Devise provides, this method is
    # called from lib/devise/modules.rb. Third-party modules need to be added explicitly using this method.
    #
    # Note that adding a module using this method does not cause it to be used in the authentication
    # process. That requires that the module be listed in the arguments passed to the 'devise' method
    # in the model class definition.
    #
    # == Options:
    #
    #   +model+      - String representing the load path to a custom *model* for this module (to autoload.)
    #   +controller+ - Symbol representing the name of an existing or custom *controller* for this module.
    #   +route+      - Symbol representing the named *route* helper for this module.
    #   +strategy+   - Symbol representing if this module got a custom *strategy*.
    #   +insert_at+  - Integer representing the order in which this module's model will be included
    #
    # All values, except :model, accept also a boolean and will have the same name as the given module
    # name.
    #
    # == Examples:
    #
    #   Devise.add_module(:party_module)
    #   Devise.add_module(:party_module, strategy: true, controller: :sessions)
    #   Devise.add_module(:party_module, model: 'party_module/model')
    #   Devise.add_module(:party_module, insert_at: 0)
    #
    # source://devise/4.8.1/lib/devise.rb#386
    def add_module(module_name, options = T.unsafe(nil)); end

    # source://devise_invitable//lib/devise_invitable.rb#78
    def allow_insecure_sign_in_after_accept; end

    # source://devise_invitable//lib/devise_invitable.rb#78
    def allow_insecure_sign_in_after_accept=(val); end

    # source://devise/4.8.1/lib/devise.rb#136
    def allow_unconfirmed_access_for; end

    # source://devise/4.8.1/lib/devise.rb#136
    def allow_unconfirmed_access_for=(val); end

    # source://devise/4.8.1/lib/devise.rb#81
    def authentication_keys; end

    # source://devise/4.8.1/lib/devise.rb#81
    def authentication_keys=(val); end

    # source://devise/4.8.1/lib/devise.rb#333
    def available_router_name; end

    # source://devise/4.8.1/lib/devise.rb#89
    def case_insensitive_keys; end

    # source://devise/4.8.1/lib/devise.rb#89
    def case_insensitive_keys=(val); end

    # source://devise/4.8.1/lib/devise.rb#254
    def clean_up_csrf_token_on_authentication; end

    # source://devise/4.8.1/lib/devise.rb#254
    def clean_up_csrf_token_on_authentication=(val); end

    # A method used internally to complete the setup of warden manager after routes are loaded.
    # See lib/devise/rails/routes.rb - ActionDispatch::Routing::RouteSet#finalize_with_devise!
    #
    # source://devise/4.8.1/lib/devise.rb#475
    def configure_warden!; end

    # source://devise/4.8.1/lib/devise.rb#140
    def confirm_within; end

    # source://devise/4.8.1/lib/devise.rb#140
    def confirm_within=(val); end

    # source://devise/4.8.1/lib/devise.rb#144
    def confirmation_keys; end

    # source://devise/4.8.1/lib/devise.rb#144
    def confirmation_keys=(val); end

    # source://devise/4.8.1/lib/devise.rb#207
    def default_scope; end

    # source://devise/4.8.1/lib/devise.rb#207
    def default_scope=(val); end

    # source://devise/4.8.1/lib/devise.rb#115
    def email_regexp; end

    # source://devise/4.8.1/lib/devise.rb#115
    def email_regexp=(val); end

    # source://devise/4.8.1/lib/devise.rb#131
    def expire_all_remember_me_on_sign_out; end

    # source://devise/4.8.1/lib/devise.rb#131
    def expire_all_remember_me_on_sign_out=(val); end

    # source://devise/4.8.1/lib/devise.rb#127
    def extend_remember_period; end

    # source://devise/4.8.1/lib/devise.rb#127
    def extend_remember_period=(val); end

    # Generate a friendly string randomly to be used as token.
    # By default, length is 20 characters.
    #
    # source://devise/4.8.1/lib/devise.rb#500
    def friendly_token(length = T.unsafe(nil)); end

    # source://devise/4.8.1/lib/devise.rb#275
    def helpers; end

    # source://devise/4.8.1/lib/devise.rb#97
    def http_authenticatable; end

    # source://devise/4.8.1/lib/devise.rb#97
    def http_authenticatable=(val); end

    # source://devise/4.8.1/lib/devise.rb#101
    def http_authenticatable_on_xhr; end

    # source://devise/4.8.1/lib/devise.rb#101
    def http_authenticatable_on_xhr=(val); end

    # source://devise/4.8.1/lib/devise.rb#77
    def http_authentication_key; end

    # source://devise/4.8.1/lib/devise.rb#77
    def http_authentication_key=(val); end

    # source://devise/4.8.1/lib/devise.rb#109
    def http_authentication_realm; end

    # source://devise/4.8.1/lib/devise.rb#109
    def http_authentication_realm=(val); end

    # Include helpers in the given scope to AC and AV.
    #
    # source://devise/4.8.1/lib/devise.rb#456
    def include_helpers(scope); end

    # source://devise_invitable//lib/devise_invitable.rb#40
    def invitation_limit; end

    # source://devise_invitable//lib/devise_invitable.rb#40
    def invitation_limit=(val); end

    # source://devise_invitable//lib/devise_invitable.rb#22
    def invite_for; end

    # source://devise_invitable//lib/devise_invitable.rb#22
    def invite_for=(val); end

    # source://devise_invitable//lib/devise_invitable.rb#49
    def invite_key; end

    # source://devise_invitable//lib/devise_invitable.rb#49
    def invite_key=(val); end

    # source://devise_invitable//lib/devise_invitable.rb#63
    def invited_by_class_name; end

    # source://devise_invitable//lib/devise_invitable.rb#63
    def invited_by_class_name=(val); end

    # source://devise_invitable//lib/devise_invitable.rb#73
    def invited_by_counter_cache; end

    # source://devise_invitable//lib/devise_invitable.rb#73
    def invited_by_counter_cache=(val); end

    # source://devise_invitable//lib/devise_invitable.rb#68
    def invited_by_foreign_key; end

    # source://devise_invitable//lib/devise_invitable.rb#68
    def invited_by_foreign_key=(val); end

    # source://devise/4.8.1/lib/devise.rb#289
    def last_attempt_warning; end

    # source://devise/4.8.1/lib/devise.rb#289
    def last_attempt_warning=(val); end

    # source://devise/4.8.1/lib/devise.rb#174
    def lock_strategy; end

    # source://devise/4.8.1/lib/devise.rb#174
    def lock_strategy=(val); end

    # Get the mailer class from the mailer reference object.
    #
    # source://devise/4.8.1/lib/devise.rb#342
    def mailer; end

    # Set the mailer reference object to access the mailer.
    #
    # source://devise/4.8.1/lib/devise.rb#347
    def mailer=(class_name); end

    # source://devise/4.8.1/lib/devise.rb#211
    def mailer_sender; end

    # source://devise/4.8.1/lib/devise.rb#211
    def mailer_sender=(val); end

    # source://devise/4.8.1/lib/devise.rb#267
    def mappings; end

    # source://devise/4.8.1/lib/devise.rb#187
    def maximum_attempts; end

    # source://devise/4.8.1/lib/devise.rb#187
    def maximum_attempts=(val); end

    # source://devise/4.8.1/lib/devise.rb#219
    def navigational_formats; end

    # source://devise/4.8.1/lib/devise.rb#219
    def navigational_formats=(val); end

    # Specify an OmniAuth provider.
    #
    #   config.omniauth :github, APP_ID, APP_SECRET
    #
    # source://devise/4.8.1/lib/devise.rb#450
    def omniauth(provider, *args); end

    # source://devise/4.8.1/lib/devise.rb#271
    def omniauth_configs; end

    # source://devise/4.8.1/lib/devise.rb#250
    def omniauth_path_prefix; end

    # source://devise/4.8.1/lib/devise.rb#250
    def omniauth_path_prefix=(val); end

    # source://devise/4.8.1/lib/devise.rb#337
    def omniauth_providers; end

    # source://devise/4.8.1/lib/devise.rb#105
    def params_authenticatable; end

    # source://devise/4.8.1/lib/devise.rb#105
    def params_authenticatable=(val); end

    # source://devise/4.8.1/lib/devise.rb#285
    def paranoid; end

    # source://devise/4.8.1/lib/devise.rb#285
    def paranoid=(val); end

    # source://devise/4.8.1/lib/devise.rb#233
    def parent_controller; end

    # source://devise/4.8.1/lib/devise.rb#233
    def parent_controller=(val); end

    # source://devise/4.8.1/lib/devise.rb#239
    def parent_mailer; end

    # source://devise/4.8.1/lib/devise.rb#239
    def parent_mailer=(val); end

    # source://devise/4.8.1/lib/devise.rb#119
    def password_length; end

    # source://devise/4.8.1/lib/devise.rb#119
    def password_length=(val); end

    # source://devise/4.8.1/lib/devise.rb#156
    def pepper; end

    # source://devise/4.8.1/lib/devise.rb#156
    def pepper=(val); end

    # source://devise/4.8.1/lib/devise.rb#148
    def reconfirmable; end

    # source://devise/4.8.1/lib/devise.rb#148
    def reconfirmable=(val); end

    # source://devise/4.8.1/lib/devise.rb#325
    def ref(arg); end

    # Regenerates url helpers considering Devise.mapping
    #
    # source://devise/4.8.1/lib/devise.rb#468
    def regenerate_helpers!; end

    # source://devise/4.8.1/lib/devise.rb#261
    def reload_routes; end

    # source://devise/4.8.1/lib/devise.rb#261
    def reload_routes=(val); end

    # source://devise/4.8.1/lib/devise.rb#123
    def remember_for; end

    # source://devise/4.8.1/lib/devise.rb#123
    def remember_for=(val); end

    # source://devise/4.8.1/lib/devise.rb#69
    def rememberable_options; end

    # source://devise/4.8.1/lib/devise.rb#69
    def rememberable_options=(val); end

    # source://devise/4.8.1/lib/devise.rb#85
    def request_keys; end

    # source://devise/4.8.1/lib/devise.rb#85
    def request_keys=(val); end

    # source://devise_invitable//lib/devise_invitable.rb#84
    def require_password_on_accepting; end

    # source://devise_invitable//lib/devise_invitable.rb#84
    def require_password_on_accepting=(val); end

    # source://devise_invitable//lib/devise_invitable.rb#58
    def resend_invitation; end

    # source://devise_invitable//lib/devise_invitable.rb#58
    def resend_invitation=(val); end

    # source://devise/4.8.1/lib/devise.rb#195
    def reset_password_keys; end

    # source://devise/4.8.1/lib/devise.rb#195
    def reset_password_keys=(val); end

    # source://devise/4.8.1/lib/devise.rb#199
    def reset_password_within; end

    # source://devise/4.8.1/lib/devise.rb#199
    def reset_password_within=(val); end

    # source://devise/4.8.1/lib/devise.rb#245
    def router_name; end

    # source://devise/4.8.1/lib/devise.rb#245
    def router_name=(val); end

    # source://devise/4.8.1/lib/devise.rb#169
    def scoped_views; end

    # source://devise/4.8.1/lib/devise.rb#169
    def scoped_views=(val); end

    # source://devise/4.8.1/lib/devise.rb#65
    def secret_key; end

    # source://devise/4.8.1/lib/devise.rb#65
    def secret_key=(val); end

    # constant-time comparison algorithm to prevent timing attacks
    #
    # source://devise/4.8.1/lib/devise.rb#508
    def secure_compare(a, b); end

    # source://devise/4.8.1/lib/devise.rb#160
    def send_email_changed_notification; end

    # source://devise/4.8.1/lib/devise.rb#160
    def send_email_changed_notification=(val); end

    # source://devise/4.8.1/lib/devise.rb#164
    def send_password_change_notification; end

    # source://devise/4.8.1/lib/devise.rb#164
    def send_password_change_notification=(val); end

    # Default way to set up Devise. Run rails generate devise_install to create
    # a fresh initializer with all configuration values.
    #
    # @yield [_self]
    # @yieldparam _self [Devise] the object that the method was called on
    #
    # source://devise/4.8.1/lib/devise.rb#306
    def setup; end

    # source://devise/4.8.1/lib/devise.rb#297
    def sign_in_after_change_password; end

    # source://devise/4.8.1/lib/devise.rb#297
    def sign_in_after_change_password=(val); end

    # source://devise/4.8.1/lib/devise.rb#203
    def sign_in_after_reset_password; end

    # source://devise/4.8.1/lib/devise.rb#203
    def sign_in_after_reset_password=(val); end

    # source://devise/4.8.1/lib/devise.rb#223
    def sign_out_all_scopes; end

    # source://devise/4.8.1/lib/devise.rb#223
    def sign_out_all_scopes=(val); end

    # source://devise/4.8.1/lib/devise.rb#227
    def sign_out_via; end

    # source://devise/4.8.1/lib/devise.rb#227
    def sign_out_via=(val); end

    # source://devise/4.8.1/lib/devise.rb#215
    def skip_session_storage; end

    # source://devise/4.8.1/lib/devise.rb#215
    def skip_session_storage=(val); end

    # source://devise/4.8.1/lib/devise.rb#73
    def stretches; end

    # source://devise/4.8.1/lib/devise.rb#73
    def stretches=(val); end

    # source://devise/4.8.1/lib/devise.rb#93
    def strip_whitespace_keys; end

    # source://devise/4.8.1/lib/devise.rb#93
    def strip_whitespace_keys=(val); end

    # source://devise/4.8.1/lib/devise.rb#152
    def timeout_in; end

    # source://devise/4.8.1/lib/devise.rb#152
    def timeout_in=(val); end

    # source://devise/4.8.1/lib/devise.rb#293
    def token_generator; end

    # source://devise/4.8.1/lib/devise.rb#293
    def token_generator=(val); end

    # source://devise/4.8.1/lib/devise.rb#191
    def unlock_in; end

    # source://devise/4.8.1/lib/devise.rb#191
    def unlock_in=(val); end

    # source://devise/4.8.1/lib/devise.rb#178
    def unlock_keys; end

    # source://devise/4.8.1/lib/devise.rb#178
    def unlock_keys=(val); end

    # source://devise/4.8.1/lib/devise.rb#183
    def unlock_strategy; end

    # source://devise/4.8.1/lib/devise.rb#183
    def unlock_strategy=(val); end

    # source://devise_invitable//lib/devise_invitable.rb#32
    def validate_on_invite; end

    # source://devise_invitable//lib/devise_invitable.rb#32
    def validate_on_invite=(val); end

    # Sets warden configuration using a block that will be invoked on warden
    # initialization.
    #
    #  Devise.setup do |config|
    #    config.allow_unconfirmed_access_for = 2.days
    #
    #    config.warden do |manager|
    #      # Configure warden to use other strategies, like oauth.
    #      manager.oauth(:twitter)
    #    end
    #  end
    #
    # source://devise/4.8.1/lib/devise.rb#442
    def warden(&block); end

    # source://devise/4.8.1/lib/devise.rb#280
    def warden_config; end

    # source://devise/4.8.1/lib/devise.rb#280
    def warden_config=(val); end
  end
end

# Constants which holds devise configuration for extensions. Those should
# not be modified by the "end user" (this is why they are constants).
#
# source://devise/4.8.1/lib/devise.rb#52
Devise::ALL = T.let(T.unsafe(nil), Array)

# source://devise/4.8.1/lib/devise.rb#53
Devise::CONTROLLERS = T.let(T.unsafe(nil), Hash)

# source://devise/4.8.1/lib/devise/rails/deprecated_constant_accessor.rb#7
Devise::DeprecatedConstantAccessor = ActiveSupport::Deprecation::DeprecatedConstantAccessor

class Devise::InvitationsController < ::DeviseController
  def create; end
  def destroy; end
  def edit; end
  def new; end
  def update; end

  protected

  def accept_resource; end
  def current_inviter; end
  def has_invitations_left?; end
  def invite_params; end
  def invite_resource(&block); end
  def resource_from_invitation_token; end
  def translation_scope; end
  def update_resource_params; end

  private

  # source://actionview/7.0.3.1/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  def _layout_from_proc; end

  class << self
    # source://activesupport/7.0.3.1/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.3.1/lib/abstract_controller/helpers.rb#11
    def _helper_methods; end

    # source://actionpack/7.0.3.1/lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options; end

    # source://actionpack/7.0.3.1/lib/action_controller/metal/helpers.rb#63
    def helpers_path; end

    # source://actionpack/7.0.3.1/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

module Devise::InvitationsController::HelperMethods
  include ::Loaf::OptionsValidator
  include ::Loaf::ViewExtensions
  include ::Turbo::DriveHelper
  include ::Turbo::FramesHelper
  include ::Turbo::IncludesHelper
  include ::Turbo::StreamsHelper
  include ::Turbo::Streams::ActionHelper
  include ::ActionText::ContentHelper
  include ::ActionText::TagHelper
  include ::Hotwire::Livereload::LivereloadTagsHelper
  include ::ActionController::Base::HelperMethods
  include ::ApplicationHelper
  include ::DeviseHelper
  include ::MetaTagsHelper
  include ::LocalTimeHelper
  include ::PreviewHelper
  include ::ApplicationController::HelperMethods
  include ::DeviseController::HelperMethods

  # def after_sign_in_path_for(*args, **_arg1, &block); end
end

# Responsible for handling devise mappings and routes configuration. Each
# resource configured by devise_for in routes is actually creating a mapping
# object. You can refer to devise_for in routes for usage options.
#
# The required value in devise_for is actually not used internally, but it's
# inflected to find all other values.
#
#   map.devise_for :users
#   mapping = Devise.mappings[:user]
#
#   mapping.name #=> :user
#   # is the scope used in controllers and warden, given in the route as :singular.
#
#   mapping.as   #=> "users"
#   # how the mapping should be search in the path, given in the route as :as.
#
#   mapping.to   #=> User
#   # is the class to be loaded from routes, given in the route as :class_name.
#
#   mapping.modules  #=> [:authenticatable]
#   # is the modules included in the class
class Devise::Mapping
  # @return [Mapping] a new instance of Mapping
  #
  # source://devise/4.8.1/lib/devise/mapping.rb#54
  def initialize(name, options); end

  # @return [Boolean]
  #
  # source://devise/4.8.1/lib/devise/mapping.rb#98
  def authenticatable?; end

  # source://devise/4.8.1/lib/devise/mapping.rb#27
  def class_name; end

  # source://devise/4.8.1/lib/devise/mapping.rb#115
  def confirmable?; end

  # source://devise/4.8.1/lib/devise/mapping.rb#27
  def controllers; end

  # source://devise/4.8.1/lib/devise/mapping.rb#115
  def database_authenticatable?; end

  # source://devise/4.8.1/lib/devise/mapping.rb#27
  def failure_app; end

  # source://devise/4.8.1/lib/devise/mapping.rb#27
  def format; end

  # source://devise/4.8.1/lib/devise/mapping.rb#102
  def fullpath; end

  # source://devise/4.8.1/lib/devise/mapping.rb#115
  def invitable?; end

  # source://devise/4.8.1/lib/devise/mapping.rb#115
  def lockable?; end

  # Return modules for the mapping.
  #
  # source://devise/4.8.1/lib/devise/mapping.rb#77
  def modules; end

  # source://devise/4.8.1/lib/devise/mapping.rb#27
  def name; end

  # source://devise/4.8.1/lib/devise/mapping.rb#90
  def no_input_strategies; end

  # source://devise/4.8.1/lib/devise/mapping.rb#115
  def omniauthable?; end

  # source://devise/4.8.1/lib/devise/mapping.rb#27
  def path; end

  # source://devise/4.8.1/lib/devise/mapping.rb#27
  def path_names; end

  # source://devise/4.8.1/lib/devise/mapping.rb#115
  def recoverable?; end

  # source://devise/4.8.1/lib/devise/mapping.rb#115
  def registerable?; end

  # source://devise/4.8.1/lib/devise/mapping.rb#115
  def rememberable?; end

  # source://devise/4.8.1/lib/devise/mapping.rb#27
  def router_name; end

  # source://devise/4.8.1/lib/devise/mapping.rb#94
  def routes; end

  # source://devise/4.8.1/lib/devise/mapping.rb#27
  def scoped_path; end

  # source://devise/4.8.1/lib/devise/mapping.rb#27
  def sign_out_via; end

  # source://devise/4.8.1/lib/devise/mapping.rb#27
  def singular; end

  # source://devise/4.8.1/lib/devise/mapping.rb#86
  def strategies; end

  # source://devise/4.8.1/lib/devise/mapping.rb#115
  def timeoutable?; end

  # Gives the class the mapping points to.
  #
  # source://devise/4.8.1/lib/devise/mapping.rb#82
  def to; end

  # source://devise/4.8.1/lib/devise/mapping.rb#115
  def trackable?; end

  # source://devise/4.8.1/lib/devise/mapping.rb#27
  def used_helpers; end

  # source://devise/4.8.1/lib/devise/mapping.rb#27
  def used_routes; end

  # source://devise/4.8.1/lib/devise/mapping.rb#115
  def validatable?; end

  private

  # source://devise/4.8.1/lib/devise/mapping.rb#144
  def default_constraints(options); end

  # source://devise_invitable//lib/devise_invitable/mapping.rb#5
  def default_controllers(options); end

  # source://devise/4.8.1/lib/devise/mapping.rb#149
  def default_defaults(options); end

  # source://devise/4.8.1/lib/devise/mapping.rb#123
  def default_failure_app(options); end

  # source://devise/4.8.1/lib/devise/mapping.rb#138
  def default_path_names(options); end

  # source://devise/4.8.1/lib/devise/mapping.rb#166
  def default_used_helpers(options); end

  # source://devise/4.8.1/lib/devise/mapping.rb#154
  def default_used_route(options); end

  class << self
    # Create magic predicates for verifying what module is activated by this map.
    # Example:
    #
    #   def confirmable?
    #     self.modules.include?(:confirmable)
    #   end
    #
    # source://devise/4.8.1/lib/devise/mapping.rb#113
    def add_module(m); end

    # source://devise/4.8.1/lib/devise/mapping.rb#49
    def find_by_path!(path, path_type = T.unsafe(nil)); end

    # Receives an object and find a scope for it. If a scope cannot be found,
    # raises an error. If a symbol is given, it's considered to be the scope.
    #
    # source://devise/4.8.1/lib/devise/mapping.rb#35
    def find_scope!(obj); end
  end
end

# source://devise_invitable//lib/devise_invitable/models/authenticatable.rb#2
module Devise::Models
  # Include the chosen devise modules in your model:
  #
  #   devise :database_authenticatable, :confirmable, :recoverable
  #
  # You can also give any of the devise configuration values in form of a hash,
  # with specific values for this model. Please check your Devise initializer
  # for a complete description on those values.
  #
  # source://devise/4.8.1/lib/devise/models.rb#79
  def devise(*modules); end

  # The hook which is called inside devise.
  # So your ORM can include devise compatibility stuff.
  #
  # source://devise/4.8.1/lib/devise/models.rb#115
  def devise_modules_hook!; end

  class << self
    # source://devise/4.8.1/lib/devise/models.rb#54
    def check_fields!(klass); end

    # Creates configuration values for Devise and for the given module.
    #
    #   Devise::Models.config(Devise::Models::DatabaseAuthenticatable, :stretches)
    #
    # The line above creates:
    #
    #   1) An accessor called Devise.stretches, which value is used by default;
    #
    #   2) Some class methods for your model Model.stretches and Model.stretches=
    #      which have higher priority than Devise.stretches;
    #
    #   3) And an instance method stretches.
    #
    # To add the class methods you need to have a module ClassMethods defined
    # inside the given class.
    #
    # source://devise/4.8.1/lib/devise/models.rb#31
    def config(mod, *accessors); end
  end
end

# Authenticatable module. Holds common settings for authentication.
#
# == Options
#
# Authenticatable adds the following options to +devise+:
#
#   * +authentication_keys+: parameters used for authentication. By default [:email].
#
#   * +http_authentication_key+: map the username passed via HTTP Auth to this parameter. Defaults to
#     the first element in +authentication_keys+.
#
#   * +request_keys+: parameters from the request object used for authentication.
#     By specifying a symbol (which should be a request method), it will automatically be
#     passed to find_for_authentication method and considered in your model lookup.
#
#     For instance, if you set :request_keys to [:subdomain], :subdomain will be considered
#     as key on authentication. This can also be a hash where the value is a boolean specifying
#     if the value is required or not.
#
#   * +http_authenticatable+: if this model allows http authentication. By default false.
#     It also accepts an array specifying the strategies that should allow http.
#
#   * +params_authenticatable+: if this model allows authentication through request params. By default true.
#     It also accepts an array specifying the strategies that should allow params authentication.
#
#   * +skip_session_storage+: By default Devise will store the user in session.
#     By default is set to skip_session_storage: [:http_auth].
#
# == active_for_authentication?
#
# After authenticating a user and in each request, Devise checks if your model is active by
# calling model.active_for_authentication?. This method is overwritten by other devise modules. For instance,
# :confirmable overwrites .active_for_authentication? to only return true if your model was confirmed.
#
# You can overwrite this method yourself, but if you do, don't forget to call super:
#
#   def active_for_authentication?
#     super && special_condition_is_valid?
#   end
#
# Whenever active_for_authentication? returns false, Devise asks the reason why your model is inactive using
# the inactive_message method. You can overwrite it as well:
#
#   def inactive_message
#     special_condition_is_valid? ? super : :special_condition_is_not_valid
#   end
#
# source://devise_invitable//lib/devise_invitable/models/authenticatable.rb#3
module Devise::Models::Authenticatable
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::Devise::Models::Authenticatable::ClassMethods

  # @return [Boolean]
  #
  # source://devise/4.8.1/lib/devise/models/authenticatable.rb#93
  def active_for_authentication?; end

  # source://devise/4.8.1/lib/devise/models/authenticatable.rb#101
  def authenticatable_salt; end

  # source://devise/4.8.1/lib/devise/models/authenticatable.rb#97
  def inactive_message; end

  # Redefine inspect using serializable_hash, to ensure we don't accidentally
  # leak passwords into exceptions.
  #
  # source://devise/4.8.1/lib/devise/models/authenticatable.rb#124
  def inspect; end

  # Redefine serializable_hash in models for more secure defaults.
  # By default, it removes from the serializable model all attributes that
  # are *not* accessible. You can remove this default by using :force_except
  # and passing a new list of attributes you want to exempt. All attributes
  # given to :except will simply add names to exempt to Devise internal list.
  #
  # source://devise/4.8.1/lib/devise/models/authenticatable.rb#109
  def serializable_hash(options = T.unsafe(nil)); end

  # source://devise/4.8.1/lib/devise/models/authenticatable.rb#89
  def unauthenticated_message; end

  # Check if the current object is valid for authentication. This method and
  # find_for_authentication are the methods used in a Warden::Strategy to check
  # if a model should be signed in or not.
  #
  # However, you should not overwrite this method, you should overwrite active_for_authentication?
  # and inactive_message instead.
  #
  # @return [Boolean]
  #
  # source://devise/4.8.1/lib/devise/models/authenticatable.rb#85
  def valid_for_authentication?; end

  protected

  # source://devise/4.8.1/lib/devise/models/authenticatable.rb#218
  def apply_to_attribute_or_variable(attr, method); end

  # source://devise/4.8.1/lib/devise/models/authenticatable.rb#133
  def devise_mailer; end

  # source://devise/4.8.1/lib/devise/models/authenticatable.rb#210
  def downcase_keys; end

  # This is an internal method called every time Devise needs
  # to send a notification/mail. This can be overridden if you
  # need to customize the e-mail delivery logic. For instance,
  # if you are using a queue to deliver e-mails (active job, delayed
  # job, sidekiq, resque, etc), you must add the delivery to the queue
  # just after the transaction was committed. To achieve this,
  # you can override send_devise_notification to store the
  # deliveries until the after_commit callback is triggered.
  #
  # The following example uses Active Job's `deliver_later` :
  #
  #     class User
  #       devise :database_authenticatable, :confirmable
  #
  #       after_commit :send_pending_devise_notifications
  #
  #       protected
  #
  #       def send_devise_notification(notification, *args)
  #         # If the record is new or changed then delay the
  #         # delivery until the after_commit callback otherwise
  #         # send now because after_commit will not be called.
  #         # For Rails < 6 use `changed?` instead of `saved_changes?`.
  #         if new_record? || saved_changes?
  #           pending_devise_notifications << [notification, args]
  #         else
  #           render_and_send_devise_message(notification, *args)
  #         end
  #       end
  #
  #       private
  #
  #       def send_pending_devise_notifications
  #         pending_devise_notifications.each do |notification, args|
  #           render_and_send_devise_message(notification, *args)
  #         end
  #
  #         # Empty the pending notifications array because the
  #         # after_commit hook can be called multiple times which
  #         # could cause multiple emails to be sent.
  #         pending_devise_notifications.clear
  #       end
  #
  #       def pending_devise_notifications
  #         @pending_devise_notifications ||= []
  #       end
  #
  #       def render_and_send_devise_message(notification, *args)
  #         message = devise_mailer.send(notification, self, *args)
  #
  #         # Deliver later with Active Job's `deliver_later`
  #         if message.respond_to?(:deliver_later)
  #           message.deliver_later
  #         # Remove once we move to Rails 4.2+ only, as `deliver` is deprecated.
  #         elsif message.respond_to?(:deliver_now)
  #           message.deliver_now
  #         else
  #           message.deliver
  #         end
  #       end
  #
  #     end
  #
  # source://devise/4.8.1/lib/devise/models/authenticatable.rb#200
  def send_devise_notification(notification, *args); end

  # source://devise/4.8.1/lib/devise/models/authenticatable.rb#214
  def strip_whitespace; end

  class << self
    # source://devise/4.8.1/lib/devise/models/authenticatable.rb#75
    def required_fields(klass); end
  end

  module GeneratedClassMethods
    def devise_modules; end
    def devise_modules=(value); end
    def devise_modules?; end
  end

  module GeneratedInstanceMethods
    def devise_modules; end
    def devise_modules?; end
  end
end

# source://devise/4.8.1/lib/devise/models/authenticatable.rb#59
Devise::Models::Authenticatable::UNSAFE_ATTRIBUTES_FOR_SERIALIZATION = T.let(T.unsafe(nil), Array)

# Invitable is responsible for sending invitation emails.
# When an invitation is sent to an email address, an account is created for it.
# Invitation email contains a link allowing the user to accept the invitation
# by setting a password (as reset password from Devise's recoverable module).
#
# Configuration:
#
#   invite_for: The period the generated invitation token is valid.
#               After this period, the invited resource won't be able to accept the invitation.
#               When invite_for is 0 (the default), the invitation won't expire.
#
# Examples:
#
#   User.find(1).invited_to_sign_up?                    # => true/false
#   User.invite!(email: 'someone@example.com')          # => send invitation
#   User.accept_invitation!(invitation_token: '...')    # => accept invitation with a token
#   User.find(1).accept_invitation!                     # => accept invitation
#   User.find(1).invite!                                # => reset invitation status and send invitation again
#
# source://devise_invitable//lib/devise_invitable/models.rb#24
module Devise::Models::Invitable
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::DeviseInvitable::Inviter
  include ::ActiveSupport::Callbacks

  requires_ancestor { Kernel }

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::Devise::Models::Invitable::ClassMethods
  mixes_in_class_methods ::DeviseInvitable::Inviter::ClassMethods
  mixes_in_class_methods ::ActiveModel::Callbacks
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker

  # Accept an invitation by clearing invitation token and and setting invitation_accepted_at
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#86
  def accept_invitation; end

  # Accept an invitation by clearing invitation token and and setting invitation_accepted_at
  # Saves the model and confirms it if model is confirmable, running invitation_accepted callbacks
  def accept_invitation!; end

  # Verifies whether a user has accepted an invitation (false when user is accepting it), or was never invited
  #
  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#134
  def accepted_or_not_invited?; end

  # Returns true if accept_invitation! was called
  #
  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#124
  def accepting_invitation?; end

  # source://devise_invitable//lib/devise_invitable/models.rb#231
  def add_taken_error(key); end

  # source://devise_invitable//lib/devise_invitable/models.rb#201
  def clear_errors_on_valid_keys; end

  # source://devise_invitable//lib/devise_invitable/models.rb#195
  def clear_reset_password_token; end

  # Returns the value of attribute completing_invite.
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#28
  def completing_invite; end

  # Sets the attribute completing_invite
  #
  # @param value the value to set the attribute completing_invite to.
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#28
  def completing_invite=(_arg0); end

  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#219
  def confirmation_required_for_invited?; end

  # Verify wheather a user is created by invitation, irrespective to invitation status
  #
  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#114
  def created_by_invite?; end

  # Deliver the invitation email
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#208
  def deliver_invitation(options = T.unsafe(nil)); end

  # provide alias to the encrypted invitation_token stored by devise
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#215
  def encrypted_invitation_token; end

  # Verifies whether a user accepted an invitation (false when user is accepting it)
  #
  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#129
  def invitation_accepted?; end

  # source://devise_invitable//lib/devise_invitable/models.rb#223
  def invitation_due_at; end

  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#235
  def invitation_taken?; end

  # Reset invitation token and send invitation again
  #
  # @yield [_self]
  # @yieldparam _self [Devise::Models::Invitable] the object that the method was called on
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#139
  def invite!(invited_by = T.unsafe(nil), options = T.unsafe(nil)); end

  # Verifies whether a user has been invited or not
  #
  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#119
  def invited_to_sign_up?; end

  # Enforce password when invitation is being accepted
  #
  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#187
  def password_required?; end

  # Returns the value of attribute raw_invitation_token.
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#29
  def raw_invitation_token; end

  # source://devise_invitable//lib/devise_invitable/models.rb#107
  def rollback_accepted_invitation; end

  # Prevent password changed email when accepting invitation
  #
  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#182
  def send_password_change_notification?; end

  # Returns the value of attribute skip_invitation.
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#27
  def skip_invitation; end

  # Sets the attribute skip_invitation
  #
  # @param value the value to set the attribute skip_invitation to.
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#27
  def skip_invitation=(_arg0); end

  # source://devise_invitable//lib/devise_invitable/models.rb#191
  def unauthenticated_message; end

  # Verify whether a invitation is active or not. If the user has been
  # invited, we need to calculate if the invitation time has not expired
  # for this user, in other words, if the invitation is still valid.
  #
  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#172
  def valid_invitation?; end

  # Only verify password when is not invited
  #
  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#177
  def valid_password?(password); end

  protected

  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#241
  def block_from_invitation?; end

  # Generates a new random token for invitation, and stores the time
  # this token is being generated
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#271
  def generate_invitation_token; end

  # source://devise_invitable//lib/devise_invitable/models.rb#277
  def generate_invitation_token!; end

  # Checks if the invitation for the user is within the limit time.
  # We do this by calculating if the difference between today and the
  # invitation sent date does not exceed the invite for time configured.
  # Invite_for is a model configuration, must always be an integer value.
  #
  # Example:
  #
  #   # invite_for = 1.day and invitation_sent_at = today
  #   invitation_period_valid?   # returns true
  #
  #   # invite_for = 5.days and invitation_sent_at = 4.days.ago
  #   invitation_period_valid?   # returns true
  #
  #   # invite_for = 5.days and invitation_sent_at = 5.days.ago
  #   invitation_period_valid?   # returns false
  #
  #   # invite_for = nil
  #   invitation_period_valid?   # will always return true
  #
  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#264
  def invitation_period_valid?; end

  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#281
  def new_record_and_responds_to?(method); end

  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#285
  def no_token_present_or_skip_invitation?; end

  class << self
    # source://devise_invitable//lib/devise_invitable/models.rb#77
    def required_fields(klass); end
  end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

# source://devise_invitable//lib/devise_invitable/models.rb#289
module Devise::Models::Invitable::ClassMethods
  # Attempt to find a user by its email. If a record is not found,
  # create a new user and send an invitation to it. If the user is found,
  # return the user with an email already exists error.
  # If the user is found and still has a pending invitation, invitation
  # email is resent unless resend_invitation is set to false.
  # Attributes must contain the user's email, other attributes will be
  # set in the record
  #
  # @yield [invitable]
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#302
  def _invite(attributes = T.unsafe(nil), invited_by = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # Attempt to find a user by it's invitation_token to set it's password.
  # If a user is found, reset it's password and automatically try saving
  # the record. If not user is found, returns a new user containing an
  # error in invitation_token attribute.
  # Attributes must contain invitation_token, password and confirmation
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#346
  def accept_invitation!(attributes = T.unsafe(nil)); end

  # source://devise_invitable//lib/devise_invitable/models.rb#377
  def after_invitation_accepted(*args, &blk); end

  # source://devise_invitable//lib/devise_invitable/models.rb#369
  def after_invitation_created(*args, &blk); end

  # source://devise/4.8.1/lib/devise/models.rb#37
  def allow_insecure_sign_in_after_accept; end

  # source://devise/4.8.1/lib/devise/models.rb#47
  def allow_insecure_sign_in_after_accept=(value); end

  # source://devise_invitable//lib/devise_invitable/models.rb#373
  def before_invitation_accepted(*args, &blk); end

  # Callback convenience methods
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#365
  def before_invitation_created(*args, &blk); end

  # source://devise_invitable//lib/devise_invitable/models.rb#356
  def find_by_invitation_token(original_token, only_valid); end

  # source://devise/4.8.1/lib/devise/models.rb#37
  def invitation_limit; end

  # source://devise/4.8.1/lib/devise/models.rb#47
  def invitation_limit=(value); end

  # source://devise_invitable//lib/devise_invitable/models.rb#332
  def invite!(attributes = T.unsafe(nil), invited_by = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # source://devise/4.8.1/lib/devise/models.rb#37
  def invite_for; end

  # source://devise/4.8.1/lib/devise/models.rb#47
  def invite_for=(value); end

  # source://devise/4.8.1/lib/devise/models.rb#37
  def invite_key; end

  # source://devise/4.8.1/lib/devise/models.rb#47
  def invite_key=(value); end

  # Return fields to invite
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#291
  def invite_key_fields; end

  # source://devise_invitable//lib/devise_invitable/models.rb#337
  def invite_mail!(attributes = T.unsafe(nil), invited_by = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # source://devise/4.8.1/lib/devise/models.rb#37
  def invited_by_class_name; end

  # source://devise/4.8.1/lib/devise/models.rb#47
  def invited_by_class_name=(value); end

  # source://devise/4.8.1/lib/devise/models.rb#37
  def invited_by_counter_cache; end

  # source://devise/4.8.1/lib/devise/models.rb#47
  def invited_by_counter_cache=(value); end

  # source://devise/4.8.1/lib/devise/models.rb#37
  def invited_by_foreign_key; end

  # source://devise/4.8.1/lib/devise/models.rb#47
  def invited_by_foreign_key=(value); end

  # source://devise/4.8.1/lib/devise/models.rb#37
  def require_password_on_accepting; end

  # source://devise/4.8.1/lib/devise/models.rb#47
  def require_password_on_accepting=(value); end

  # source://devise/4.8.1/lib/devise/models.rb#37
  def resend_invitation; end

  # source://devise/4.8.1/lib/devise/models.rb#47
  def resend_invitation=(value); end

  # source://devise/4.8.1/lib/devise/models.rb#37
  def validate_on_invite; end

  # source://devise/4.8.1/lib/devise/models.rb#47
  def validate_on_invite=(value); end

  private

  # The random password, as set after an invitation, must conform
  # to any password format validation rules of the application.
  # This default fixes the most common scenarios: Passwords must contain
  # lower + upper case, a digit and a symbol.
  # For more unusual rules, this method can be overridden.
  #
  # source://devise_invitable//lib/devise_invitable/models.rb#400
  def random_password; end

  class << self
    # source://devise/4.8.1/lib/devise/models.rb#32
    def available_configs; end

    # source://devise/4.8.1/lib/devise/models.rb#32
    def available_configs=(_arg0); end
  end
end

# Strategies that do not require user input.
#
# source://devise/4.8.1/lib/devise.rb#59
Devise::NO_INPUT = T.let(T.unsafe(nil), Array)

# The +ParameterSanitizer+ deals with permitting specific parameters values
# for each +Devise+ scope in the application.
#
# The sanitizer knows about Devise default parameters (like +password+ and
# +password_confirmation+ for the `RegistrationsController`), and you can
# extend or change the permitted parameters list on your controllers.
#
# === Permitting new parameters
#
# You can add new parameters to the permitted list using the +permit+ method
# in a +before_action+ method, for instance.
#
#    class ApplicationController < ActionController::Base
#      before_action :configure_permitted_parameters, if: :devise_controller?
#
#      protected
#
#      def configure_permitted_parameters
#        # Permit the `subscribe_newsletter` parameter along with the other
#        # sign up parameters.
#        devise_parameter_sanitizer.permit(:sign_up, keys: [:subscribe_newsletter])
#      end
#    end
#
# Using a block yields an +ActionController::Parameters+ object so you can
# permit nested parameters and have more control over how the parameters are
# permitted in your controller.
#
#    def configure_permitted_parameters
#      devise_parameter_sanitizer.permit(:sign_up) do |user|
#        user.permit(newsletter_preferences: [])
#      end
#    end
class Devise::ParameterSanitizer
  # @return [ParameterSanitizer] a new instance of ParameterSanitizer
  #
  # source://devise_invitable//lib/devise_invitable/parameter_sanitizer.rb#31
  def initialize(resource_class, resource_name, params); end

  # Add or remove new parameters to the permitted list of an +action+.
  #
  # === Arguments
  #
  # * +action+ - A +Symbol+ with the action that the controller is
  #   performing, like +sign_up+, +sign_in+, etc.
  # * +keys:+     - An +Array+ of keys that also should be permitted.
  # * +except:+   - An +Array+ of keys that shouldn't be permitted.
  # * +block+     - A block that should be used to permit the action
  #   parameters instead of the +Array+ based approach. The block will be
  #   called with an +ActionController::Parameters+ instance.
  #
  # === Examples
  #
  #   # Adding new parameters to be permitted in the `sign_up` action.
  #   devise_parameter_sanitizer.permit(:sign_up, keys: [:subscribe_newsletter])
  #
  #   # Removing the `password` parameter from the `account_update` action.
  #   devise_parameter_sanitizer.permit(:account_update, except: [:password])
  #
  #   # Using the block form to completely override how we permit the
  #   # parameters for the `sign_up` action.
  #   devise_parameter_sanitizer.permit(:sign_up) do |user|
  #     user.permit(:email, :password, :password_confirmation)
  #   end
  #
  #
  # Returns nothing.
  #
  # source://devise/4.8.1/lib/devise/parameter_sanitizer.rb#110
  def permit(action, keys: T.unsafe(nil), except: T.unsafe(nil), &block); end

  # Sanitize the parameters for a specific +action+.
  #
  # === Arguments
  #
  # * +action+ - A +Symbol+ with the action that the controller is
  #   performing, like +sign_up+, +sign_in+, etc.
  #
  # === Examples
  #
  #    # Inside the `RegistrationsController#create` action.
  #    resource = build_resource(devise_parameter_sanitizer.sanitize(:sign_up))
  #    resource.save
  #
  # Returns an +ActiveSupport::HashWithIndifferentAccess+ with the permitted
  # attributes.
  #
  # source://devise/4.8.1/lib/devise/parameter_sanitizer.rb#70
  def sanitize(action); end

  private

  # Cast a sanitized +ActionController::Parameters+ to a +HashWithIndifferentAccess+
  # that can be used elsewhere.
  #
  # Returns an +ActiveSupport::HashWithIndifferentAccess+.
  #
  # source://devise/4.8.1/lib/devise/parameter_sanitizer.rb#132
  def cast_to_hash(params); end

  # source://devise/4.8.1/lib/devise/parameter_sanitizer.rb#137
  def default_params; end

  # source://devise/4.8.1/lib/devise/parameter_sanitizer.rb#149
  def empty_params; end

  # source://devise/4.8.1/lib/devise/parameter_sanitizer.rb#157
  def extract_auth_keys(klass); end

  # @return [Boolean]
  #
  # source://devise/4.8.1/lib/devise/parameter_sanitizer.rb#145
  def hashable_resource_params?; end

  # source://devise/4.8.1/lib/devise/parameter_sanitizer.rb#153
  def permit_keys(parameters, keys); end

  # @raise [NotImplementedError]
  #
  # source://devise/4.8.1/lib/devise/parameter_sanitizer.rb#163
  def unknown_action!(action); end
end

# source://devise/4.8.1/lib/devise/parameter_sanitizer.rb#38
Devise::ParameterSanitizer::DEFAULT_PERMITTED_ATTRIBUTES = T.let(T.unsafe(nil), Hash)

# source://devise/4.8.1/lib/devise.rb#54
Devise::ROUTES = T.let(T.unsafe(nil), Hash)

# source://devise/4.8.1/lib/devise.rb#55
Devise::STRATEGIES = T.let(T.unsafe(nil), Hash)

# True values used to check params
#
# source://devise/4.8.1/lib/devise.rb#62
Devise::TRUE_VALUES = T.let(T.unsafe(nil), Array)

# source://devise/4.8.1/lib/devise.rb#56
Devise::URL_HELPERS = T.let(T.unsafe(nil), Hash)

# source://devise/4.8.1/lib/devise/version.rb#4
Devise::VERSION = T.let(T.unsafe(nil), String)

# source://devise_invitable//lib/devise_invitable.rb#1
module DeviseInvitable; end

# source://devise_invitable//lib/devise_invitable.rb#6
module DeviseInvitable::Controllers; end

# source://devise_invitable//lib/devise_invitable/controllers/helpers.rb#1
module DeviseInvitable::Controllers::Helpers
  extend ::ActiveSupport::Concern

  # source://devise_invitable//lib/devise_invitable/controllers/helpers.rb#11
  def after_accept_path_for(resource); end

  # source://devise_invitable//lib/devise_invitable/controllers/helpers.rb#7
  def after_invite_path_for(inviter, invitee = T.unsafe(nil)); end

  protected

  # source://devise_invitable//lib/devise_invitable/controllers/helpers.rb#17
  def authenticate_inviter!; end
end

# source://devise_invitable//lib/devise_invitable/rails.rb#2
class DeviseInvitable::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.0.3.1/lib/active_support/callbacks.rb#68
    def __callbacks; end
  end
end

# source://devise_invitable//lib/devise_invitable/inviter.rb#2
module DeviseInvitable::Inviter
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::DeviseInvitable::Inviter::ClassMethods

  # Return true if this user has invitations left to send
  #
  # @return [Boolean]
  #
  # source://devise_invitable//lib/devise_invitable/inviter.rb#15
  def has_invitations_left?; end

  # source://devise_invitable//lib/devise_invitable/inviter.rb#10
  def invitation_limit; end

  protected

  # source://devise_invitable//lib/devise_invitable/inviter.rb#29
  def decrement_invitation_limit!; end
end

# source://devise_invitable//lib/devise_invitable/inviter.rb#36
module DeviseInvitable::Inviter::ClassMethods
  # source://devise/4.8.1/lib/devise/models.rb#37
  def invitation_limit; end

  # source://devise/4.8.1/lib/devise/models.rb#47
  def invitation_limit=(value); end

  class << self
    # source://devise/4.8.1/lib/devise/models.rb#32
    def available_configs; end

    # source://devise/4.8.1/lib/devise/models.rb#32
    def available_configs=(_arg0); end
  end
end

# source://devise_invitable//lib/devise_invitable/mailer.rb#4
module DeviseInvitable::Mailer
  # Deliver an invitation email
  #
  # source://devise_invitable//lib/devise_invitable/mailer.rb#7
  def invitation_instructions(record, token, opts = T.unsafe(nil)); end
end

# source://devise_invitable//lib/devise_invitable/mapping.rb#2
module DeviseInvitable::Mapping
  private

  # source://devise_invitable//lib/devise_invitable/mapping.rb#5
  def default_controllers(options); end
end

# source://devise_invitable//lib/devise_invitable/parameter_sanitizer.rb#2
module DeviseInvitable::ParameterSanitizer
  # source://devise_invitable//lib/devise_invitable/parameter_sanitizer.rb#31
  def initialize(resource_class, resource_name, params); end
end

class DeviseInvitable::RegistrationsController < ::Devise::RegistrationsController
  protected

  def build_resource(hash = T.unsafe(nil)); end

  private

  # source://actionview/7.0.3.1/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  def _layout_from_proc; end

  class << self
    # source://actionpack/7.0.3.1/lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options; end

    # source://actionpack/7.0.3.1/lib/action_controller/metal/helpers.rb#63
    def helpers_path; end

    # source://actionpack/7.0.3.1/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end
