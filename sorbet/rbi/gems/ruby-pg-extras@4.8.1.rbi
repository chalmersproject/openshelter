# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ruby-pg-extras` gem.
# Please instead update this file by running `bin/tapioca gem ruby-pg-extras`.

module RubyPgExtras
  class << self
    def add_extensions(options = T.unsafe(nil)); end
    def all_locks(options = T.unsafe(nil)); end
    def bloat(options = T.unsafe(nil)); end
    def blocking(options = T.unsafe(nil)); end
    def buffercache_stats(options = T.unsafe(nil)); end
    def buffercache_usage(options = T.unsafe(nil)); end
    def cache_hit(options = T.unsafe(nil)); end
    def calls(options = T.unsafe(nil)); end
    def connection; end
    def database_url; end
    def database_url=(value); end
    def db_settings(options = T.unsafe(nil)); end
    def description_for(query_name:); end
    def diagnose(in_format: T.unsafe(nil)); end
    def display_result(result, title:, in_format:); end
    def duplicate_indexes(options = T.unsafe(nil)); end
    def extensions(options = T.unsafe(nil)); end
    def index_cache_hit(options = T.unsafe(nil)); end
    def index_info(args: T.unsafe(nil), in_format: T.unsafe(nil)); end
    def index_scans(options = T.unsafe(nil)); end
    def index_size(options = T.unsafe(nil)); end
    def index_usage(options = T.unsafe(nil)); end
    def indexes(options = T.unsafe(nil)); end
    def kill_all(options = T.unsafe(nil)); end
    def locks(options = T.unsafe(nil)); end
    def long_running_queries(options = T.unsafe(nil)); end
    def mandelbrot(options = T.unsafe(nil)); end
    def null_indexes(options = T.unsafe(nil)); end
    def outliers(options = T.unsafe(nil)); end
    def pg_stat_statements_reset(options = T.unsafe(nil)); end
    def records_rank(options = T.unsafe(nil)); end
    def run_query(query_name:, in_format:, args: T.unsafe(nil)); end
    def seq_scans(options = T.unsafe(nil)); end
    def sql_for(query_name:); end
    def sql_path_for(query_name:); end
    def ssl_used(options = T.unsafe(nil)); end
    def table_cache_hit(options = T.unsafe(nil)); end
    def table_index_scans(options = T.unsafe(nil)); end
    def table_indexes_size(options = T.unsafe(nil)); end
    def table_info(args: T.unsafe(nil), in_format: T.unsafe(nil)); end
    def table_size(options = T.unsafe(nil)); end
    def tables(options = T.unsafe(nil)); end
    def total_index_size(options = T.unsafe(nil)); end
    def total_table_size(options = T.unsafe(nil)); end
    def unused_indexes(options = T.unsafe(nil)); end
    def vacuum_stats(options = T.unsafe(nil)); end
  end
end

RubyPgExtras::DEFAULT_ARGS = T.let(T.unsafe(nil), Hash)

class RubyPgExtras::DiagnoseData
  def call; end

  private

  def bloat; end
  def duplicate_indexes; end
  def index_cache_hit; end
  def null_indexes; end
  def outliers; end
  def query_module; end
  def ssl_used; end
  def table_cache_hit; end
  def unused_indexes; end

  class << self
    def call; end
  end
end

RubyPgExtras::DiagnoseData::PG_EXTRAS_BLOAT_MIN_VALUE = T.let(T.unsafe(nil), Integer)
RubyPgExtras::DiagnoseData::PG_EXTRAS_INDEX_CACHE_HIT_MIN_EXPECTED = T.let(T.unsafe(nil), String)

# 1 MB
RubyPgExtras::DiagnoseData::PG_EXTRAS_NULL_INDEXES_MIN_SIZE_MB = T.let(T.unsafe(nil), Integer)

# 50%
RubyPgExtras::DiagnoseData::PG_EXTRAS_NULL_MIN_NULL_FRAC_PERCENT = T.let(T.unsafe(nil), Integer)

# 33%
RubyPgExtras::DiagnoseData::PG_EXTRAS_OUTLIERS_MIN_EXEC_RATIO = T.let(T.unsafe(nil), Integer)

RubyPgExtras::DiagnoseData::PG_EXTRAS_TABLE_CACHE_HIT_MIN_EXPECTED = T.let(T.unsafe(nil), String)
RubyPgExtras::DiagnoseData::PG_EXTRAS_UNUSED_INDEXES_MAX_SCANS = T.let(T.unsafe(nil), Integer)

# 1000000 bytes
RubyPgExtras::DiagnoseData::PG_EXTRAS_UNUSED_INDEXES_MIN_SIZE_BYTES = T.let(T.unsafe(nil), Integer)

class RubyPgExtras::DiagnosePrint
  def call(data); end

  private

  def colorize(string, color); end
  def title; end

  class << self
    def call(data); end
  end
end

class RubyPgExtras::IndexInfo
  def call(table_name = T.unsafe(nil)); end
  def index_scans_data; end
  def index_size_data; end
  def indexes_data; end
  def null_indexes_data; end

  private

  def query_module; end

  class << self
    def call(table_name = T.unsafe(nil)); end
  end
end

class RubyPgExtras::IndexInfoPrint
  def call(data); end

  private

  def title; end

  class << self
    def call(data); end
  end
end

RubyPgExtras::NEW_PG_STAT_STATEMENTS = T.let(T.unsafe(nil), String)
RubyPgExtras::QUERIES = T.let(T.unsafe(nil), Array)

class RubyPgExtras::SizeParser
  class << self
    def regexp_for_units(units); end

    # @raise [ArgumentError]
    def to_i(arg); end

    def to_i_binary(arg); end
    def to_i_digits(arg); end
    def to_i_for_units(arg, regexp, units, multiplier); end
    def to_i_si(arg); end
  end
end

RubyPgExtras::SizeParser::BINARY_REGEXP = T.let(T.unsafe(nil), Regexp)
RubyPgExtras::SizeParser::BINARY_UNITS = T.let(T.unsafe(nil), Array)
RubyPgExtras::SizeParser::DIGITS_ONLY_REGEXP = T.let(T.unsafe(nil), Regexp)
RubyPgExtras::SizeParser::SI_REGEXP = T.let(T.unsafe(nil), Regexp)
RubyPgExtras::SizeParser::SI_UNITS = T.let(T.unsafe(nil), Array)

class RubyPgExtras::TableInfo
  def call(table_name); end

  private

  def index_cache_hit_data; end
  def query_module; end
  def records_rank_data; end
  def seq_scans_data; end
  def table_cache_hit_data; end
  def table_index_scans_data; end
  def table_size_data; end
  def tables_data; end

  class << self
    def call(table_name = T.unsafe(nil)); end
  end
end

class RubyPgExtras::TableInfoPrint
  def call(data); end

  private

  def title; end

  class << self
    def call(data); end
  end
end
